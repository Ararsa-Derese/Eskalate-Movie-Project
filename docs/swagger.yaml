openapi: 3.0.0
info:
  title: Movie Collection API
  description: A RESTful API for managing movie collections built with Go, following clean architecture principles.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: string
          example: ["Validation failed", "Invalid input"]

    MovieResponse:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "The Matrix"
        description:
          type: string
          example: "A computer programmer discovers that reality is a simulation"
        genres:
          type: array
          items:
            type: string
          example: ["Sci-Fi", "Action"]
        actors:
          type: array
          items:
            type: string
          example: ["Keanu Reeves", "Laurence Fishburne"]
        poster_url:
          type: string
          example: "https://cloudinary.com/movie-posters/matrix.jpg"
        trailer_url:
          type: string
          example: "https://youtube.com/watch?v=matrix"
        user_id:
          type: string
          example: "user123"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateMovieRequest:
      type: object
      properties:
        title:
          type: string
          example: "The Matrix Reloaded"
        description:
          type: string
          example: "The sequel to The Matrix"
        genres:
          type: array
          items:
            type: string
          example: ["Sci-Fi", "Action"]
        actors:
          type: array
          items:
            type: string
          example: ["Keanu Reeves", "Laurence Fishburne"]
        trailer_url:
          type: string
          example: "https://youtube.com/watch?v=matrix-reloaded"

    SignupRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          format: password
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Signup successful"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      username:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies:
    get:
      tags:
        - Movies
      summary: Get all movies with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Movies fetched successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieResponse'
                  page_number:
                    type: integer
                  page_size:
                    type: integer
                  total_size:
                    type: integer

    post:
      tags:
        - Movies
      summary: Create a new movie
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - poster
              properties:
                title:
                  type: string
                description:
                  type: string
                genres:
                  type: array
                  items:
                    type: string
                actors:
                  type: array
                  items:
                    type: string
                trailer_url:
                  type: string
                poster:
                  type: string
                  format: binary
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Movie created successfully"
                  data:
                    $ref: '#/components/schemas/MovieResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/{id}:
    get:
      tags:
        - Movies
      summary: Get movie by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Movie ID
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Movie details fetched successfully"
                  data:
                    $ref: '#/components/schemas/MovieResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Movies
      summary: Update movie by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Movie ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Movie updated successfully"
                  data:
                    $ref: '#/components/schemas/MovieResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Movies
      summary: Delete movie by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Movie ID
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Movie deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 